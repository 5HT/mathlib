/- Categories which are small relative to a cardinal Œ∫.
   Œ∫-filtered categories.
   Normally we care about these concepts for categories which are
   used to index (co)limits, so we work with small_categories. -/

import category_theory.category
import category_theory.functor
import category_theory.limits.shape -- for cocone
import category_theory.products
import category_theory.small
import category_theory.subgraph
import set_theory.cofinality

universes u u' v'

open classical cardinal function set

local notation `card` := cardinal.mk.{u} -- Maybe this is a bad idea?
variables (Œ∫ : regular_cardinal.{u})

namespace category_theory
local infixr ` ‚Üù `:80 := category_theory.functor

-- filtered categories

structure kappa_filtered (C : Type u) [small_category C] : Prop :=
(cocone_functor : ‚àÄ {I : Type u} [small_category I] (hI : is_kappa_small Œ∫ I) (F : I ‚Üù C),
  nonempty (limits.cocone F))

-- [A&R, 1.21]
structure kappa_filtered' (C : Type u) [small_category C] : Prop :=
(cocone_objs : ‚àÄ {I : Type u} (hI : card I < Œ∫) (F : I ‚Üí C),
  nonempty Œ£ (Z : C), Œ† i, F i ‚ü∂ Z)
(cocone_parallel : ‚àÄ {X Y : C} (I : Type u) (hI : card I < Œ∫) (F : I ‚Üí (X ‚ü∂ Y)),
  ‚àÉ (Z : C) (g : Y ‚ü∂ Z), ‚àÄ i j, F i ‚â´ g = F j ‚â´ g)

structure kappa_filtered'' (C : Type u) [small_category C] : Prop :=
(cocone_subgraph : ‚àÄ (S : subgraph C) (h : S.is_kappa_small Œ∫),
  ‚àÉ (Z : C) (g : Œ† X : S.objs, X.1 ‚ü∂ Z), ‚àÄ X Y (f : S.homs X Y), f.1 ‚â´ g (S.cod f) = g (S.dom f))

variables {C : Type u} [small_category C]

section 
-- kappa_filtered ‚Üí kappa_filtered'

def discrete (ob : Type u) : Type u := ob
instance discrete_category (ob : Type u) : small_category (discrete ob) :=
{ hom := Œª X Y, ulift (plift (X = Y)),
  id := Œª X, ‚ü®‚ü®rfl‚ü©‚ü©,
  comp := Œª X Y Z f g, ‚ü®‚ü®f.1.1.trans g.1.1‚ü©‚ü© }

def discrete_functor_of_function {ob : Type u} {D : Type u'} [category.{u' v'} D] (F : ob ‚Üí D) :
  discrete ob ‚Üù D :=
{ obj := F, map' := Œª X Y f, eq_to_iso (congr_arg F f.1.1) }

lemma discrete_is_small {ob : Type u} (h : card ob < Œ∫) : is_kappa_small Œ∫ (discrete ob) :=
begin
  apply kappa_small_of_ob_and_hom_small,
  { exact h },
  { intros X Y, change card (ulift (plift (X = Y))) < Œ∫,
    have : subsingleton (ulift (plift (X = Y))) := by apply_instance,
    calc card (ulift (plift (X = Y))) ‚â§ 1 : le_one_iff_subsingleton.mpr this
      ... < omega  : one_lt_omega
      ... ‚â§ Œ∫      : Œ∫.infinite }
end

inductive suspension (mor : Type u) : Type u
| src {} : suspension
| tgt {} : suspension
open suspension

instance suspension_category (mor : Type u) : small_category (suspension mor) :=
{ hom := Œª X Y, match X, Y with
  | src, src := punit
  | src, tgt := mor
  | tgt, src := pempty
  | tgt, tgt := punit
  end,
  id := Œª X, match X with
  | src := punit.star
  | tgt := punit.star
  end,
  comp := Œª X Y Z f g, match X, Y, Z, f, g with
  | src, src, src, punit.star, punit.star := punit.star
  | src, src, tgt, punit.star, f := f
  | src, tgt, tgt, f, punit.star := f
  | tgt, tgt, tgt, punit.star, punit.star := punit.star
  end,
  id_comp' := Œª X Y f, by cases X; cases Y; try { cases f }; refl,
  comp_id' := Œª X Y f, by cases X; cases Y; try { cases f }; refl,
  assoc' := Œª W X Y Z f g h,
    by cases W; cases X; cases Y; cases Z; try { cases f }; try { cases g }; try { cases h }; refl }

def suspension_functor_of_function {mor : Type u} {D : Type u'} [category.{u' v'} D]
  {A B : D} (F : mor ‚Üí (A ‚ü∂ B)) : suspension mor ‚Üù D :=
{ obj := Œª X, match X with | src := A | tgt := B end,
  map' := Œª X Y f, match X, Y, f with
  | src, src, punit.star := category.id A
  | src, tgt, f := F f
  | tgt, tgt, punit.star := category.id B
  end,
  map_id' := Œª X, by cases X; refl,
  map_comp' := Œª X Y Z f g, by cases X; cases Y; cases Z; tidy }

instance {mor : Type u} : fintype (suspension mor) :=
‚ü®‚ü®src::tgt::0, by simp‚ü©, Œª x, by cases x; simp‚ü©

-- TODO: move this
instance punit.fintype : fintype punit.{u+1} :=
‚ü®‚ü®punit.star::0, by simp‚ü©, Œª x, by cases x; simp‚ü©

lemma suspension_is_small {mor : Type u} (h : card mor < Œ∫) :
  is_kappa_small Œ∫ (suspension mor) :=
begin
  apply kappa_small_of_ob_and_hom_small,
  { apply is_small_of_finite },
  { rintros (_|_) (_|_),
    { change mk punit < _, apply is_small_of_finite },
    { exact h },
    { change mk pempty < _, apply is_small_of_finite },
    { change mk punit < _, apply is_small_of_finite } }
end

lemma filtered_implies_filtered' (h : kappa_filtered Œ∫ C) : kappa_filtered' Œ∫ C :=
{ cocone_objs := assume I hI F,
    let ‚ü®t‚ü© := h.cocone_functor (discrete_is_small Œ∫ hI) (discrete_functor_of_function F) in
    ‚ü®‚ü®t.X, Œª i, t.Œπ i‚ü©‚ü©,
  cocone_parallel := assume X Y I hI F,
    let ‚ü®t‚ü© := h.cocone_functor (suspension_is_small Œ∫ hI) (suspension_functor_of_function F) in
    have ‚àÄ k, F k ‚â´ t.Œπ tgt = t.Œπ src, from assume k, t.w (show @src I ‚ü∂ @tgt I, from k),
    ‚ü®t.X, t.Œπ tgt, Œª i j, (this i).trans (this j).symm‚ü© }

lemma kappa_filtered'.cone_parallel_two (h : kappa_filtered' Œ∫ C) {X Y : C} (f g : X ‚ü∂ Y) :
  ‚àÉ (Z : C) (h : Y ‚ü∂ Z), f ‚â´ h = g ‚â´ h :=
let ‚ü®Z, h, hh‚ü© :=
  h.cocone_parallel (ulift bool) (is_small_of_finite _)
    (Œª i, match i.down with | ff := f | tt := g end) in
‚ü®Z, h, hh ‚ü®ff‚ü© ‚ü®tt‚ü©‚ü©

lemma filtered'_implies_filtered'' (h : kappa_filtered' Œ∫ C) : kappa_filtered'' Œ∫ C :=
{ cocone_subgraph := assume S ‚ü®hS‚ÇÄ, hS‚ÇÅ‚ü©,
  -- The strategy is as follows:
  -- 1. Form a cocone on all the objects of S, with new vertex Z‚ÇÄ and cocone maps e_X : X ‚Üí Z‚ÇÄ
  -- 2. For each morphism f : X ‚Üí Y in S, coequalize f_X and f_Y ‚àò f, via a new map g_f : Z‚ÇÄ ‚Üí Z_f
  -- 3. Form a cocone on all the objects Z_f, with new vertex Z‚ÇÅ and cocone maps j_f : Z_f ‚Üí Z‚ÇÅ
  -- 4. Coequalize all the morphisms h_f ‚àò g_f, with new vertex Z. Call their common composition l.
  -- Then we can build a cocone on all of S which maps X to Z via l ‚àò e_X.
  -- If there aren't any morphisms in S, then we have a problem in step 4, but then we can just
  -- use the original cocone Z‚ÇÄ.
  let ‚ü®‚ü®Z‚ÇÄ, e‚ü©‚ü© := h.cocone_objs hS‚ÇÄ (Œª X, X) in
  have ‚àÄ (f : Œ£ X Y, S.homs X Y), ‚àÉ (p : Œ£ Z, Z‚ÇÄ ‚ü∂ Z),
    e (S.dom f.2.2) ‚â´ p.2 = (f.2.2.val ‚â´ e (S.cod f.2.2)) ‚â´ p.2,
  from assume ‚ü®X, Y, f‚ü©,
    let ‚ü®Z, h, hh‚ü© := h.cone_parallel_two Œ∫ (e (S.dom f)) (f.val ‚â´ e (S.cod f)) in ‚ü®‚ü®Z, h‚ü©, hh‚ü©,
  let ‚ü®g, hg‚ü© := axiom_of_choice this,
      ‚ü®‚ü®Z‚ÇÅ, j‚ü©‚ü© := h.cocone_objs hS‚ÇÅ (Œª f, (g f).1),
      ‚ü®Z, k, hk‚ü© := h.cocone_parallel (Œ£ X Y, S.homs X Y) hS‚ÇÅ (Œª f, (g f).2 ‚â´ j f) in
  by_cases
    (Œª (hhom : nonempty (Œ£ X Y, S.homs X Y)),
      let ‚ü®f‚ÇÄ‚ü© := hhom in
      have ‚àÄ f : Œ£ X Y, S.homs X Y, (g f‚ÇÄ).2 ‚â´ j f‚ÇÄ ‚â´ k = (g f).2 ‚â´ j f ‚â´ k,
      from assume f, by simpa using hk f‚ÇÄ f,
      ‚ü®Z, Œª X, e X ‚â´ (g f‚ÇÄ).2 ‚â´ j f‚ÇÄ ‚â´ k, Œª _ _ f,
        let X := S.dom f, Y := S.cod f in
        calc f.val ‚â´ e Y ‚â´ (g f‚ÇÄ).snd ‚â´ j f‚ÇÄ ‚â´ k
            = f.val ‚â´ e Y ‚â´ (g ‚ü®X, Y, f‚ü©).snd ‚â´ j ‚ü®X, Y, f‚ü© ‚â´ k   : by rw this
        ... = ((f.val ‚â´ e Y) ‚â´ (g ‚ü®X, Y, f‚ü©).snd) ‚â´ j ‚ü®X, Y, f‚ü© ‚â´ k : by simp
        ... = (e X ‚â´ (g ‚ü®X, Y, f‚ü©).snd) ‚â´ j ‚ü®X, Y, f‚ü© ‚â´ k         : by rw hg ‚ü®X, Y, f‚ü©
        ... = e X ‚â´ (g ‚ü®X, Y, f‚ü©).snd ‚â´ j ‚ü®X, Y, f‚ü© ‚â´ k           : by simp
        ... = e X ‚â´ (g f‚ÇÄ).snd ‚â´ j f‚ÇÄ ‚â´ k                         : by rw this‚ü©)
    (Œª nohoms, ‚ü®Z‚ÇÄ, Œª X, e X, Œª X Y f, by refine absurd _ nohoms; exact ‚ü®‚ü®X, Y, f‚ü©‚ü©‚ü©) }

lemma filtered''_implies_filtered (h : kappa_filtered'' Œ∫ C) : kappa_filtered Œ∫ C :=
{ cocone_functor := assume I catI hI F, by exactI
  -- TODO: image of entire subcategory of I?
  let S : subgraph C :=
        { objs := {X | ‚àÉ i, F i = X},
          homs := Œª X Y, {f | ‚àÉ (ijg : Œ£ (i j : I), i ‚ü∂ j), F ijg.1 = X ‚àß F ijg.2.1 = Y ‚àß F.map ijg.2.2 == f},
          dom_mem := sorry,
          cod_mem := sorry } in
  have hS‚ÇÄ : card S.objs < Œ∫, begin
    refine lt_of_le_of_lt _ (ob_small_of_small Œ∫ hI),
    refine ge_of_surjective (Œª i, ‚ü®F i, i, rfl‚ü©) _,
    rintro ‚ü®X, i, rfl‚ü©, exact ‚ü®i, rfl‚ü©
  end,
  have hS‚ÇÅ : card (Œ£ X Y, S.homs X Y) < Œ∫, begin
    refine lt_of_le_of_lt _ hI,
    refine ge_of_surjective
      (Œª ijg, ‚ü®F ijg.1, F ijg.2.1, F.map ijg.2.2, ijg, rfl, rfl, heq.rfl‚ü©) _,
    rintro ‚ü®X, Y, ‚ü®f, ijg, ‚ü®‚ü©, ‚ü®‚ü©, ‚ü®‚ü©‚ü©‚ü©,
    exact ‚ü®ijg, rfl‚ü©
  end,
  let ‚ü®Z, g, hg‚ü© := h.cocone_subgraph S ‚ü®hS‚ÇÄ, hS‚ÇÅ‚ü© in
  ‚ü®{ X := Z, Œπ := Œª i, g ‚ü®F i, i, rfl‚ü©,
     w := assume i i' f, hg (F i) (F i') ‚ü®F.map f, ‚ü®i, i', f‚ü©, rfl, rfl, heq.rfl‚ü© }‚ü© }

lemma filtered'_iff_filtered : kappa_filtered' Œ∫ C ‚Üî kappa_filtered Œ∫ C :=
‚ü®Œª h, filtered''_implies_filtered Œ∫ (filtered'_implies_filtered'' Œ∫ h),
 Œª h, filtered_implies_filtered' Œ∫ h‚ü©

lemma filtered''_iff_filtered : kappa_filtered'' Œ∫ C ‚Üî kappa_filtered Œ∫ C :=
‚ü®Œª h, filtered''_implies_filtered Œ∫ h,
 Œª h, filtered'_implies_filtered'' Œ∫ (filtered_implies_filtered' Œ∫ h)‚ü©

-- Next: A filtered category admits a cofinal functor from a directed one

section directed_from_filtered

-- We will need all the following properties of Z to define the functor I ‚Üí C:
-- 1. For every X ‚àà S, there is a unique map e_X : X ‚Üí Z that belongs to S.
-- 2. The identity of Z belongs to S (so e_Z = ùüô Z).
-- 3. For each f : X ‚Üí Y ‚àà S, we have e_Y ‚àò f = e_X.
-- These are guaranteed by the ability to take a cocone on a subgraph.
structure is_end (S : subgraph C) (Z : S.objs) :=
(e : Œ† (X : S.objs), X.1 ‚ü∂ Z.1)
(mem : ‚àÄ (X : S.objs), e X ‚àà S.homs X Z)
(id : e Z = category.id Z)
-- TODO: ‚¶ÉX Y‚¶Ñ?
(comp : ‚àÄ (X Y : S.objs) (f : X.1 ‚ü∂ Y.1) (hf : f ‚àà S.homs X Y), f ‚â´ e Y = e X)

variables (C)
-- The proof in [A&R] considers subcategories with a unique terminal
-- object. We've replaced subcategories with subgraphs and a terminal
-- object with an "end" as defined above. But the end does not
-- actually have to be unique either, it just needs to be chosen along
-- with the subgraph.
structure I : Type u :=
(S : subgraph C)
(hS : S.is_kappa_small Œ∫)
(Z : S.objs)
(hZ : is_end S Z)

instance I.preorder : preorder (I Œ∫ C) :=
{ le := Œª S T, S.1 ‚â§ T.1,
  le_refl := Œª S, le_refl S.1,
  le_trans := Œª S T U hST hTU, le_trans hST hTU }

-- This is not the real definition, but good enough for our purposes
-- (it is what we are going to prove anyways).
variables {C}
def cofinal {J : Type u} [small_category J] (G : J ‚Üù C) : Prop :=
(‚àÄ c, ‚àÉ i, nonempty (c ‚ü∂ G i)) ‚àß
(‚àÄ c i i' (f : c ‚ü∂ G i) (f' : c ‚ü∂ G i'), ‚àÉ i'' (g : i ‚ü∂ i'') (g' : i' ‚ü∂ i''),
  f ‚â´ G.map g = f' ‚â´ G.map g')

variables (C)
structure conclusion :=
(I : Type u)
[preI : preorder I]
(hI : kappa_filtered Œ∫ I)       -- TODO: kappa_directed, for preorders?
(F : I ‚Üù C)
(hF : cofinal F)

section part_I
def part_I_condition : Prop :=
‚àÄ (S : subgraph C), S.is_kappa_small Œ∫ ‚Üí ‚àÉ (T : I Œ∫ C), S ‚â§ T.S

variables (hC : part_I_condition Œ∫ C)

variables {Œ∫ C}
lemma I_kappa_directed {Œ± : Type u} (hŒ± : card Œ± < Œ∫) (f : Œ± ‚Üí I Œ∫ C) : ‚àÉ T, ‚àÄ a, f a ‚â§ T :=
-- TODO: Move this proof to image_small_of_small
/-let S : subgraph C :=
      { objs := ‚ãÉ (a : Œ±), (f a).S.objs,
        homs := Œª X Y, ‚ãÉ (a : {a : Œ± // X.1 ‚àà (f a).S.objs ‚àß Y.1 ‚àà (f a).S.objs}),
          (f a.1).S.homs ‚ü®X, a.2.1‚ü© ‚ü®Y, a.2.2‚ü© },
    ‚ü®T, h‚ü© := hC S $ begin
      apply subgraph.kappa_small_of_ob_and_hom_small,
      { apply small_of_small_union_of_small, { exact hŒ± }, { exact (Œª a, (f a).hS.1) } },
      { intros X Y,
        apply small_of_small_union_of_small,
        { exact lt_of_le_of_lt le_of_subtype hŒ± },
        { rintro ‚ü®a, aX, aY‚ü©, apply subgraph.hom_small_of_kappa_small, exact (f a).hS } }
    end in-/
let S : subgraph C := union_subgraph (Œª a, (f a).S),
    hS : S.is_kappa_small Œ∫ := sorry,
    ‚ü®T, h‚ü© := hC S hS in
‚ü®T, assume a, show (f a).S ‚â§ T.S, by refine le_trans _ h; exact subgraph_union _ a‚ü©

-- TODO: general equivalence between kappa_directed & kappa_filtered for preorders
lemma I_kappa_filtered : kappa_filtered Œ∫ (I Œ∫ C) :=
(filtered'_iff_filtered Œ∫).mp
  { cocone_objs := Œª Œ± hŒ± F, let ‚ü®T, hT‚ü© := I_kappa_directed hC hŒ± F in ‚ü®‚ü®T, Œª a, ‚ü®‚ü®hT a‚ü©‚ü©‚ü©‚ü©,
    cocone_parallel := Œª _ Y _ _ _, ‚ü®Y, category.id Y, by tidy‚ü© }

variables (Œ∫ C)
def F : I Œ∫ C ‚Üù C :=
{ obj := Œª S, S.Z,
  map' := Œª S T h, T.hZ.e ‚ü®S.Z.1, h.down.down.1 S.Z.2‚ü©,
  map_id' := Œª S, by convert S.hZ.id; simp,
  map_comp' := Œª S T U hST hTU, begin
    symmetry,
    -- TODO: Clean this up
    apply U.hZ.comp
      ‚ü®S.Z.1, (hST ‚â´ hTU).down.down.1 S.Z.2‚ü©
      ‚ü®T.Z.1, hTU.down.down.1 T.Z.2‚ü©,
    rcases hTU with ‚ü®‚ü®‚ü®h‚ÇÅ, h‚ÇÇ‚ü©‚ü©‚ü©,
    apply h‚ÇÇ,
    apply T.hZ.mem
  end }

-- Next, we have to prove that F is cofinal.
variables {C}

include hC
lemma cofinal_F : cofinal (F Œ∫ C) :=
‚ü®begin
   intro c,
   refine ‚ü®‚ü®singleton_subgraph c, _, ‚ü®c, singleton_objs.is_c c‚ü©, ‚ü®_, _, _, _‚ü©‚ü©, ‚ü®category.id c‚ü©‚ü©,
   { exact singleton_subgraph_is_small Œ∫ c },
   { rintro ‚ü®_, ‚ü®‚ü©‚ü©, apply category.id },
   { rintro ‚ü®_, ‚ü®‚ü©‚ü©, exact singleton_homs.is_id_c c },
   { refl },
   { rintros ‚ü®_, ‚ü®‚ü©‚ü© ‚ü®_, ‚ü®‚ü©‚ü© f ‚ü®‚ü©, simp }
 end,
 begin
   intros c S T f f',
   let U‚ÇÄ := S.S ‚à™ T.S ‚à™ single_morphism_subgraph f ‚à™ single_morphism_subgraph f',
   have U‚ÇÄ_small : U‚ÇÄ.is_kappa_small Œ∫ := by simp [S.hS, T.hS],
   rcases hC U‚ÇÄ U‚ÇÄ_small with ‚ü®U, hU‚ü©,
   have SU : S.S ‚â§ U.S,
   { refine le_trans _ hU,
     repeat { apply le_refl <|> refine le_trans _ (subgraph_union_left _ _) } },
   have TU : T.S ‚â§ U.S,
   { refine le_trans _ hU,
     repeat { apply subgraph_union_right <|> refine le_trans _ (subgraph_union_left _ _) } },
   refine ‚ü®U, ‚ü®‚ü®_‚ü©‚ü©, ‚ü®‚ü®_‚ü©‚ü©, _‚ü©,
   -- TODO: Refactor all this reasoning about membership/subgraphs (also in def of F)
   -- It's still not great.
   { exact SU }, { exact TU },
   { have : c ‚àà U‚ÇÄ := by simp,
     have : c ‚àà U.S := hU.1 this,
     have h1 := U.hZ.comp ‚ü®c, this‚ü© ‚ü®_, SU.1 S.Z.2‚ü© f (hU.2 _ _ (by simp)),
     have h2 := U.hZ.comp ‚ü®c, this‚ü© ‚ü®_, TU.1 T.Z.2‚ü© f' (hU.2 _ _ (by simp)),
     erw [h1, h2] }
 end‚ü©

lemma part_I : nonempty (conclusion Œ∫ C) :=
‚ü®‚ü®I Œ∫ C, I_kappa_filtered hC, F Œ∫ C, cofinal_F Œ∫ hC‚ü©‚ü©

end part_I

section part_II

-- Now we show that if K is a set of cardinality Œ∫ which we view as an
-- indiscrete category, then C √ó K has the property required for
-- part_I and the functor C √ó K ‚Üí C is cofinal.

-- First we show that if C is "freshly filtered" in that we can choose
-- a cocone on any Œ∫-small subgraph S with a vertex not belonging to
-- S, then C satisfies the part_I property.

structure freshly_filtered (C : Type u) [small_category C] : Prop :=
(cocone_subgraph : ‚àÄ (S : subgraph C) (h : S.is_kappa_small Œ∫),
  ‚àÉ (Z : C) (g : Œ† X : S.objs, X.1 ‚ü∂ Z), Z ‚àâ S.objs ‚àß
    ‚àÄ X Y (f : S.homs X Y), f.1 ‚â´ g (S.cod f) = g (S.dom f))

local attribute [instance] prop_decidable

lemma part_I_of_freshly_filtered (hC : freshly_filtered Œ∫ C) : part_I_condition Œ∫ C :=
assume S hS,
  let ‚ü®Z, g, hZ, h‚ü© := hC.cocone_subgraph S hS in
  let T : subgraph C :=
    S ‚à™ singleton_subgraph Z ‚à™ union_subgraph (Œª (X : S.objs), single_morphism_subgraph (g X)) in
  have memT : ‚àÄ {X}, X ‚àà T ‚Üí X ‚àà S ‚à® X = Z, begin
    intros X hX,
    rcases hX with hX‚ÇÅ|hX‚ÇÇ,
    { rcases hX‚ÇÅ with hX‚ÇÅ|‚ü®‚ü®‚ü©‚ü©, { exact or.inl hX‚ÇÅ }, { exact or.inr rfl } },
    { rcases hX‚ÇÇ with ‚ü®i, _, _, _, ‚ü®‚ü®‚ü©‚ü©‚ü©,
      { exact or.inl i.2 },
      { exact or.inr rfl } }
  end,
  have memS : ‚àÄ {X}, X ‚àà S ‚Üí X ‚â† Z, from assume X hS hX, by rw hX at hS; exact absurd hS hZ,
  let g' : Œ† X : T.objs, X.1 ‚ü∂ Z := Œª X,
    if H : X.1 = Z
    then (eq_to_iso H).hom
    else g ‚ü®X.1, (memT X.2).resolve_right H‚ü© in
  begin
    refine ‚ü®‚ü®T, _, ‚ü®Z, _‚ü©, ‚ü®g', _, _, _‚ü©‚ü©, _‚ü©,
    -- TODO: Can we make simp kill this entire smallness subgoal?
    { apply union_small_of_small_of_small,
      { exact union_small_of_small_of_small Œ∫ hS (singleton_subgraph_is_small _ _) },
      { apply union_small_of_small Œ∫ _ hS.1, intro i,
        apply single_morphism_subgraph_is_small } },
    { change Z ‚àà T, simp [T] },
    { dsimp [g'], intro X,
      rcases memT X.2 with h‚ÇÅ|h‚ÇÇ,
      { have : X.1 ‚â† Z, from memS h‚ÇÅ,
        simp [this], refine hom_mem_of_mem_of_subgraph _ (subgraph_union_right _ _),
        refine hom_mem_of_mem_of_subgraph _ (subgraph_union _ ‚ü®X.1, h‚ÇÅ‚ü©),
        apply mem_single_morphism },
      { cases X with X‚ÇÅ X‚ÇÇ,
        simp [dif_pos h‚ÇÇ],
        refine hom_mem_of_mem_of_subgraph _ (subgraph_union_left _ _),
        refine hom_mem_of_mem_of_subgraph _ (subgraph_union_right _ _),
        cases h‚ÇÇ,
        exact singleton_homs.is_id_c Z } },
      { simp [g'], refl },
      { intros X Y f hf,
        rcases hf with hf|hf‚ÇÉ,
        { rcases hf with hf‚ÇÅ|hf‚ÇÇ,
          { have XZ : X.1 ‚â† Z, from memS (S.dom_mem hf‚ÇÅ),
            have YZ : Y.1 ‚â† Z, from memS (S.cod_mem hf‚ÇÅ),
            simp [g', dif_neg, XZ, YZ], exact h X.1 Y.1 ‚ü®f, hf‚ÇÅ‚ü© },
          { cases X, cases Y, cases hf‚ÇÇ, simp } },
        { cases X, cases Y, rcases hf‚ÇÉ with ‚ü®i, _, _, _, ‚ü®‚ü©‚ü©,
          have iZ : i.1 ‚â† Z, from memS i.2,
          cases i, simp [g', dif_neg iZ], refl } },
      { exact le_trans (subgraph_union_left _ _) (subgraph_union_left _ _) }
  end


section K
variables (K : Type u) (hK : card K = Œ∫)

section indiscrete
def indiscrete (Œ± : Type u) : Type u := Œ±
instance indiscrete.small_category (Œ± : Type u) : small_category (indiscrete Œ±) :=
{ hom := Œª X Y, punit,
  id := Œª X, punit.star,
  comp := Œª X Y Z f g, punit.star }
end indiscrete

-- Then we show that if C is Œ∫-filtered and K is a set of cardinality
-- Œ∫ then C √ó K is freshly filtered.
include hK
lemma CxK_part_I' (hC : kappa_filtered Œ∫ C) : freshly_filtered Œ∫ (C √ó indiscrete K) :=
{ cocone_subgraph := assume S hS,
  let S' := image_subgraph (prod.fst.{u u u u} C (indiscrete K)) S in
  have S'_small : S'.is_kappa_small Œ∫, from image_small_of_small Œ∫ _ _ hS,
  let ‚ü®Z, g, h‚ü© := ((filtered''_iff_filtered Œ∫).mpr hC).cocone_subgraph S' S'_small in
  let ks : set (discrete K) := _root_.prod.snd '' S.objs in
  have ks ‚â† univ, begin
    intro H, change _root_.prod.snd '' set_of S.objs = univ at H,
    rw [‚Üêsubtype_val_range, ‚Üêrange_comp, range_iff_surjective] at H,
    apply not_le_of_lt hS.1,
    convert ge_of_surjective _ H,
    exact hK.symm
  end,
  let ‚ü®k, _, hk‚ü© := exists_of_ssubset ‚ü®subset_univ ks, this‚ü© in
  let Z' : C √ó indiscrete K := ‚ü®Z, k‚ü© in
  have Z' ‚àâ S, from assume h, by refine absurd _ hk; exact ‚ü®Z', h, rfl‚ü©,
  ‚ü®Z', Œª X, (g ‚ü®X.1.1, image_subgraph_objs.img_obj _ X.2‚ü©, punit.star), this, begin
     intros X Y f,
     apply prod.ext,
     { exact h X.1 Y.1 ‚ü®f.1.1, image_subgraph_homs.img_hom _ f.2‚ü© },
     { apply subsingleton.elim }
   end‚ü© }
omit hK

lemma CxK_part_I'' (hC : kappa_filtered Œ∫ C) : part_I_condition Œ∫ (C √ó indiscrete K) :=
part_I_of_freshly_filtered Œ∫ _ (CxK_part_I' Œ∫ C K hK hC)

lemma part_II (hC : kappa_filtered Œ∫ C) : nonempty (conclusion Œ∫ (C √ó indiscrete K)) :=
part_I Œ∫ (CxK_part_I'' Œ∫ C K hK hC)

end K

-- Remaining: check the projection C √ó indiscrete K ‚Üí C is cofinal and then conclude

end part_II

end directed_from_filtered

end

end category_theory
