import category_theory.full_subcategory
import category_theory.limits.limits
import logic.crec
import set_theory.ordinal

universes u v

namespace category_theory.transfinite

open category_theory category_theory.limits

variables {C : Type u} [ùíû : category.{u v} C]

section
variables {Œ≥ : Type v} [partial_order Œ≥]

def below (j : Œ≥) : Type v := {i // i < j}
instance (j : Œ≥) : partial_order (below j) := by dunfold below; apply_instance

def cocone_at (j : Œ≥) : cocone (full_subcategory_inclusion (Œª i, i < j)) :=
{ X := j, Œπ := { app := Œª i, ‚ü®‚ü®le_of_lt i.property‚ü©‚ü© } }

include ùíû

def smooth_at (F : Œ≥ ‚•§ C) (j : Œ≥) : Type (max u v) :=
is_colimit (F.map_cocone (cocone_at j))

end

section morphism_class
variables (C)
include ùíû
def morphism_class : Type (max u v) := Œ† ‚¶ÉX Y : C‚¶Ñ, set (X ‚ü∂ Y)
end morphism_class

variables (I : morphism_class C)

variables {Œ≥ : Type v} [lattice.order_top Œ≥] [is_well_order Œ≥ (<)]

noncomputable def bot : Œ≥ :=
well_founded.min (is_well_order.wf (<)) set.univ
  (set.ne_empty_of_mem (show ‚ä§ ‚àà set.univ, by trivial))

lemma bot_le (i : Œ≥) : bot ‚â§ i :=
sorry

noncomputable def ix {o : ordinal} (ho : o < ordinal.type ((<) : Œ≥ ‚Üí Œ≥ ‚Üí Prop)) : Œ≥ :=
o.enum _ ho

def succ_hom {o : ordinal} (ho : o.succ < ordinal.type ((<) : Œ≥ ‚Üí Œ≥ ‚Üí Prop)) :
  ix (lt_trans o.lt_succ_self ho) ‚ü∂ ix ho :=
ulift.up $ plift.up $ le_of_lt $ (ordinal.enum_lt _ ho).mpr o.lt_succ_self

variables (Œ≥)
include ùíû

structure transfinite_composition :=
(F : Œ≥ ‚•§ C)
(succ : ‚àÄ (o : ordinal) (ho : o.succ < ordinal.type _), I (F.map (succ_hom ho)))
(limit : ‚àÄ (o : ordinal) ho, o.is_limit ‚Üí smooth_at F (ordinal.enum (<) o ho))

variables {I Œ≥}

noncomputable def transfinite_composition.composition
  (c : transfinite_composition.{u v} I Œ≥) : c.F.obj bot ‚ü∂ c.F.obj ‚ä§ :=
c.F.map ‚ü®‚ü®lattice.le_top‚ü©‚ü©

section lp

variables {C}

def lp {a b x y : C} (f : a ‚ü∂ b) (g : x ‚ü∂ y) : Prop :=
‚àÄ (h : a ‚ü∂ x) (k : b ‚ü∂ y), h ‚â´ g = f ‚â´ k ‚Üí ‚àÉ l : b ‚ü∂ x, f ‚â´ l = h ‚àß l ‚â´ g = k

def llp {x y : C} (g : x ‚ü∂ y) : morphism_class C := Œª a b, {f | lp f g}

theorem llp_closed_under_transfinite_composition {x y : C} (g : x ‚ü∂ y)
  (c : transfinite_composition (llp g) Œ≥) : lp c.composition g :=
begin
  intros h k S,
  suffices : Œ† i, Œ£' li : c.F.obj i ‚ü∂ x,
    c.F.map ‚ü®‚ü®bot_le i‚ü©‚ü© ‚â´ li = h ‚àß li ‚â´ g = c.F.map ‚ü®‚ü®lattice.le_top‚ü©‚ü© ‚â´ k,
  { rcases this ‚ä§ with ‚ü®l, L‚ü©,
    refine ‚ü®l, _‚ü©,
    convert ‚ÜêL using 2,
    convert category.id_comp _ _,
    apply c.F.map_id },
  refine crec (is_well_order.wf ((<) : Œ≥ ‚Üí Œ≥ ‚Üí Prop))
    (Œª i i' hii' p p', c.F.map ‚ü®‚ü®le_of_lt hii'‚ü©‚ü© ‚â´ p'.1 = p.1) _,
  rintros j ‚ü®l, hl‚ü©,

  -- The inductive consistency hypothesis only applies for i < i',
  -- but also holds automatically for i = i'.
  have hl' : ‚àÄ i i' (hij : i < j) (hi'j : i' < j) (hii' : i ‚â§ i'),
    c.F.map ‚ü®‚ü®hii'‚ü©‚ü© ‚â´ (l i' hi'j).fst = (l i hij).fst,
  { intros,
    cases eq_or_lt_of_le hii' with hii' hii',
    { subst hii', convert category.id_comp _ _, apply c.F.map_id },
    { exact hl i i' hij hi'j hii' } },

  apply classical.indefinite_description,
  rcases (ordinal.typein (<) j).zero_or_succ_or_limit with H|‚ü®o, H‚ü©|H,

  -- Base case
  { have : j = bot, from sorry,
    subst this,
    fsplit,
    { refine ‚ü®h, _, S‚ü©,
      convert category.id_comp _ _,
      apply c.F.map_id },
    { exact Œª i ria, absurd ria (not_lt_of_le (bot_le i)) } },

  -- Successor case
  { have os : o.succ < ordinal.type ((<) : Œ≥ ‚Üí Œ≥ ‚Üí Prop),
      by rw ‚ÜêH; apply ordinal.typein_lt_type,
    have : j = ix os,
    { convert (ordinal.enum_typein _ _).symm,
      { exact H.symm },
      { apply ordinal.typein_lt_type } },
    subst this,
    -- We already constructed a lift up to `ix o`, and need to extend to `ix o.succ`.
    rcases classical.indefinite_description _
      (c.succ o os (l (ix (lt_trans o.lt_succ_self os)) _).1 (c.F.map ‚ü®‚ü®lattice.le_top‚ü©‚ü© ‚â´ k) _) with ‚ü®l', hl'‚ÇÅ, hl'‚ÇÇ‚ü©,
    fsplit,
    { refine ‚ü®l', _, hl'‚ÇÇ‚ü©,
      -- New top triangle commutes
      { rw ‚Üê(l (ix (lt_trans o.lt_succ_self os)) _).snd.1,
        rw [‚Üêhl'‚ÇÅ, ‚Üêcategory.assoc, ‚Üêc.F.map_comp], refl } },
    -- New map extends the old ones
    { intros i ria,
      -- By hl'‚ÇÅ, we extended the immediately preceding map, but we need to check all
      -- XXX: Need to handle the cases i = o, i < o separately
      rw ‚Üêhl' i (ix (lt_trans o.lt_succ_self os)) ria _ _,
      conv { to_rhs, rw [‚Üêhl'‚ÇÅ, ‚Üêcategory.assoc, ‚Üêc.F.map_comp] },
      refl,
      sorry },
    { exact (ordinal.enum_lt _ _).mpr o.lt_succ_self },
    -- New bottom quadrilateral commutes
    { rw [‚Üêcategory.assoc, ‚Üêc.F.map_comp],
        apply (l (ix _) _).snd.2 } },

  -- Limit case
  { revert H,
    generalize H‚ÇÅ : ordinal.typein has_lt.lt j = o,
    intro H,
    have ho : o < ordinal.type ((<) : Œ≥ ‚Üí Œ≥ ‚Üí Prop),
      by rw ‚ÜêH‚ÇÅ; apply ordinal.typein_lt_type,
    have : j = ix ho,
    { convert (ordinal.enum_typein _ _).symm,
      { exact H‚ÇÅ.symm },
      { apply ordinal.typein_lt_type } },
    subst this,
    -- Extend to the limit by gluing all the maps `l i` for `i < j`
    let t : cocone (full_subcategory_inclusion (Œª i, i < ix ho) ‚ãô c.F) :=
    { X := x, Œπ := { app := Œª i, (l i.1 i.2).1, naturality' := begin
        rintros i i' ‚ü®‚ü®hii'‚ü©‚ü©,
        convert hl' i.1 i'.1 i.2 _ _,
        apply category.comp_id
      end } },
    let l' := (c.limit _ ho H).desc t,
    refine ‚ü®‚ü®l', _, _‚ü©, _‚ü©,
    -- New top triangle commutes
    { have : bot < ix ho, from sorry,
      rw ‚Üê(l bot this).snd.1,
      convert (c.limit _ ho H).fac t ‚ü®bot, _‚ü©,
      { convert category.id_comp _ _,
        apply c.F.map_id } },
    -- New bottom quadrilateral commutes
    { apply (c.limit _ ho H).hom_ext,
      rintro ‚ü®i, io‚ü©,
      rw [‚Üêcategory.assoc, ‚Üêcategory.assoc],
      convert (l i io).snd.2,
      { apply (c.limit _ ho H).fac },
      { erw ‚Üêc.F.map_comp, refl } },
    -- New map extends the old ones
    { exact Œª i ria, (c.limit _ ho H).fac t ‚ü®i, ria‚ü© } }
end

end lp

end category_theory.transfinite
