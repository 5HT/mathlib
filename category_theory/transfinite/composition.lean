import category_theory.full_subcategory
import category_theory.limits.limits
import logic.crec
import set_theory.ordinal

universes u v

namespace category_theory.transfinite

open category_theory category_theory.limits

variables {C : Type u} [ùíû : category.{u v} C]

section
variables {Œ≥ : Type v} [partial_order Œ≥]

def below (j : Œ≥) : Type v := {i // i < j}
instance (j : Œ≥) : partial_order (below j) := by dunfold below; apply_instance

def cocone_at (j : Œ≥) : cocone (full_subcategory_inclusion (Œª i, i < j)) :=
{ X := j, Œπ := { app := Œª i, ‚ü®‚ü®le_of_lt i.property‚ü©‚ü© } }

include ùíû

def smooth_at (F : Œ≥ ‚•§ C) (j : Œ≥) : Prop :=
nonempty (is_colimit (F.map_cocone (cocone_at j)))

end

section morphism_class
variables (C)
include ùíû
def morphism_class : Type (max u v) := Œ† ‚¶ÉX Y : C‚¶Ñ, set (X ‚ü∂ Y)
end morphism_class

variables (I : morphism_class C)

variables {Œ≥ : Type v} [lattice.order_top Œ≥] [is_well_order Œ≥ (<)]


noncomputable def bot : Œ≥ :=
well_founded.min (is_well_order.wf (<)) set.univ
  (set.ne_empty_of_mem (show ‚ä§ ‚àà set.univ, by trivial))

lemma not_lt_bot (i : Œ≥) : ¬¨(i < bot) :=
by apply well_founded.not_lt_min; trivial

lemma bot_le (i : Œ≥) : bot ‚â§ i :=
sorry

attribute [irreducible] bot     -- TODO: Do we really need to do this?


def is_succ : Œ≥ ‚Üí Œ≥ ‚Üí Prop :=
sorry

lemma is_succ.lt {i j : Œ≥} (h : is_succ i j) : i < j :=
sorry

lemma is_succ.le {i j : Œ≥} (h : is_succ i j) : i ‚â§ j :=
le_of_lt h.lt

lemma is_succ.le_of_lt_succ {i' i j : Œ≥} (h : is_succ i j) : i' < j ‚Üí i' ‚â§ i :=
sorry


def is_limit : Œ≥ ‚Üí Prop :=
sorry

lemma is_limit.bot_lt {j : Œ≥} (h : is_limit j) : bot < j :=
sorry

inductive bot_or_succ_or_limit : Œ≥ ‚Üí Type v
| is_bot (j : Œ≥) (h : j = bot) : bot_or_succ_or_limit j
| is_succ (i j : Œ≥) (h : is_succ i j) : bot_or_succ_or_limit j
| is_limit (j : Œ≥) (h : is_limit j) : bot_or_succ_or_limit j

lemma is_bot_or_succ_or_limit (i : Œ≥) : bot_or_succ_or_limit i :=
sorry


variables (Œ≥)
include ùíû

structure transfinite_composition :=
(F : Œ≥ ‚•§ C)
(succ : ‚àÄ (i j : Œ≥) (h : is_succ i j), I (F.map ‚ü®‚ü®h.le‚ü©‚ü©))
(limit : ‚àÄ (j : Œ≥), is_limit j ‚Üí smooth_at F j) -- maybe just inline `smooth_at`?

variables {I Œ≥}

noncomputable def transfinite_composition.composition
  (c : transfinite_composition.{u v} I Œ≥) : c.F.obj bot ‚ü∂ c.F.obj ‚ä§ :=
c.F.map ‚ü®‚ü®lattice.le_top‚ü©‚ü©

section lp

variables {C}

def lp {a b x y : C} (f : a ‚ü∂ b) (g : x ‚ü∂ y) : Prop :=
‚àÄ (h : a ‚ü∂ x) (k : b ‚ü∂ y), h ‚â´ g = f ‚â´ k ‚Üí ‚àÉ l : b ‚ü∂ x, f ‚â´ l = h ‚àß l ‚â´ g = k

def llp {x y : C} (g : x ‚ü∂ y) : morphism_class C := Œª a b, {f | lp f g}

theorem llp_closed_under_transfinite_composition {x y : C} (g : x ‚ü∂ y)
  (c : transfinite_composition (llp g) Œ≥) : lp c.composition g :=
begin
  intros h k S,
  suffices : Œ† i, Œ£' li : c.F.obj i ‚ü∂ x,
    c.F.map ‚ü®‚ü®bot_le i‚ü©‚ü© ‚â´ li = h ‚àß li ‚â´ g = c.F.map ‚ü®‚ü®lattice.le_top‚ü©‚ü© ‚â´ k,
  { rcases this ‚ä§ with ‚ü®l, L‚ü©,
    refine ‚ü®l, _‚ü©,
    convert ‚ÜêL using 2,
    convert category.id_comp _ _,
    apply c.F.map_id },
  refine crec (is_well_order.wf (<))
    (Œª i i' hii' p p', c.F.map ‚ü®‚ü®le_of_lt hii'‚ü©‚ü© ‚â´ p'.1 = p.1) _,
  rintros j ‚ü®l, hl‚ü©,

  -- The inductive consistency hypothesis only applies for i < i',
  -- but also holds automatically for i = i'.
  have hl' : ‚àÄ i i' (hij : i < j) (hi'j : i' < j) (hii' : i ‚â§ i'),
    c.F.map ‚ü®‚ü®hii'‚ü©‚ü© ‚â´ (l i' hi'j).fst = (l i hij).fst,
  { intros,
    cases eq_or_lt_of_le hii' with hii' hii',
    { subst hii', convert category.id_comp _ _, apply c.F.map_id },
    { exact hl i i' hij hi'j hii' } },

  apply classical.indefinite_description,
  rcases is_bot_or_succ_or_limit j with ‚ü®_,rfl‚ü©|‚ü®i,_,hij‚ü©|‚ü®_,hj‚ü©,

  -- Base case
  { fsplit,
    { refine ‚ü®h, _, S‚ü©,
      convert category.id_comp _ _,
      apply c.F.map_id },
    { exact Œª i ria, absurd ria (not_lt_bot i) } },

  -- Successor case
  { -- We already constructed a lift up to `ix o`, and need to extend to `ix o.succ`.
    rcases classical.indefinite_description _
      (c.succ i j hij (l i _).1 (c.F.map ‚ü®‚ü®lattice.le_top‚ü©‚ü© ‚â´ k) _) with ‚ü®l', hl'‚ÇÅ, hl'‚ÇÇ‚ü©,
    fsplit,
    { refine ‚ü®l', _, hl'‚ÇÇ‚ü©,
      -- New top triangle commutes
      { rw ‚Üê(l i _).snd.1,
        rw [‚Üêhl'‚ÇÅ, ‚Üêcategory.assoc, ‚Üêc.F.map_comp], refl } },
    -- New map extends the old ones
    { intros i' ria,
      -- By hl'‚ÇÅ, we extended the immediately preceding map, but we need to check all
      -- XXX: Need to handle the cases i = o, i < o separately
      rw ‚Üêhl' i' i ria hij.lt (hij.le_of_lt_succ ria),
      conv { to_rhs, rw [‚Üêhl'‚ÇÅ, ‚Üêcategory.assoc, ‚Üêc.F.map_comp] },
      refl },
    -- New bottom quadrilateral commutes
    { rw [‚Üêcategory.assoc, ‚Üêc.F.map_comp],
        apply (l _ _).snd.2 } },

  -- Limit case
  { -- Extend to the limit by gluing all the maps `l i` for `i < j`
    let t : cocone (full_subcategory_inclusion (Œª i, i < j) ‚ãô c.F) :=
    { X := x, Œπ := { app := Œª i, (l i.1 i.2).1, naturality' := begin
        rintros i i' ‚ü®‚ü®hii'‚ü©‚ü©,
        convert hl' i.1 i'.1 i.2 _ _,
        apply category.comp_id
      end } },
    rcases c.limit _ hj with ‚ü®hlim‚ü©,
    let l' := hlim.desc t,
    refine ‚ü®‚ü®l', _, _‚ü©, _‚ü©,
    -- New top triangle commutes
    { rw ‚Üê(l bot hj.bot_lt).snd.1,
      convert hlim.fac t ‚ü®bot, _‚ü©,
      { convert category.id_comp _ _,
        apply c.F.map_id } },
    -- New bottom quadrilateral commutes
    { apply hlim.hom_ext,
      rintro ‚ü®i, io‚ü©,
      rw [‚Üêcategory.assoc, ‚Üêcategory.assoc],
      convert (l i io).snd.2,
      { apply hlim.fac },
      { erw ‚Üêc.F.map_comp, refl } },
    -- New map extends the old ones
    { exact Œª i ria, hlim.fac t ‚ü®i, ria‚ü© } }
end

end lp

end category_theory.transfinite
