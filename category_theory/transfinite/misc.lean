import category_theory.transfinite.composition

section
universe u
def change (Œ± : Type u) {Œ≤ : Type u} (e : Œ≤ = Œ±) : Œ± ‚Üí Œ≤ := e.mpr
end

section
open category_theory
universes u v u' v'
variables {C : Type u} [ùíû : category.{u v} C]
include ùíû

@[simp] def change_hom (a b : C) {a' b' : C} (ea : a' = a) (eb : b' = b) (f : a ‚ü∂ b) : a' ‚ü∂ b' :=
eq_to_hom ea ‚â´ f ‚â´ eq_to_hom eb.symm

lemma heq_of_eq_hom {a b a' b' : C} {f : a ‚ü∂ b} {f' : a' ‚ü∂ b'} (ea : a' = a) (eb : b' = b) :
  change_hom a b ea eb f = f' ‚Üí f == f' :=
by cases ea; cases eb; simp

@[simp] lemma eq_to_hom_trans_assoc {X Y Z W : C} (p : X = Y) (q : Y = Z) (f : Z ‚ü∂ W) :
  eq_to_hom p ‚â´ eq_to_hom q ‚â´ f = eq_to_hom (p.trans q) ‚â´ f :=
by cases p; cases q; simp

lemma I_change_hom (I : category_theory.transfinite.morphism_class C)
  {a b a' b' : C} {ea : a' = a} {eb : b' = b}
  (f : a ‚ü∂ b) : I (eq_to_hom ea ‚â´ f ‚â´ eq_to_hom eb.symm) ‚Üî I f :=
by cases ea; cases eb; simp

lemma I_change_hom' (I : category_theory.transfinite.morphism_class C)
  {a b a' : C} {ea : a' = a} (f : a ‚ü∂ b) : I (eq_to_hom ea ‚â´ f) ‚Üî I f :=
by cases ea; simp

lemma is_colimit_of_iso {J : Type v} [small_category J] {F G : J ‚•§ C} (Œ± : F ‚âÖ G)
  {t : limits.cocone G} (ht : limits.is_colimit t) :
  limits.is_colimit (t.precompose Œ±.hom) :=
sorry                           -- TODO

@[simp] lemma full_subcategory_inclusion_obj (Z : C ‚Üí Prop) (X) :
  (full_subcategory_inclusion Z).obj X = X.val :=
rfl

@[simp] lemma full_subcategory_inclusion_map (Z : C ‚Üí Prop) {X Y} (f : X ‚ü∂ Y) :
  (full_subcategory_inclusion Z).map f = f :=
rfl

variables {D : Type u'} [ùíü : category.{u' v'} D]
include ùíü

lemma category_theory.functor.ext {F G : C ‚•§ D} (h_obj : ‚àÄ X, F.obj X = G.obj X)
  (h_map : ‚àÄ X Y f, F.map f = eq_to_hom (h_obj X) ‚â´ G.map f ‚â´ eq_to_hom (h_obj Y).symm) :
  F = G :=
begin
  cases F with F_obj _ _ _, cases G with G_obj _ _ _,
  have : F_obj = G_obj, by ext X; apply h_obj,
  subst this,
  congr,
  ext X Y f,
  simpa using h_map X Y f
end

lemma category_theory.functor.eq_obj {F G : C ‚•§ D} (h : F = G) (X) : F.obj X = G.obj X :=
by subst h

lemma category_theory.functor.eq_hom {F G : C ‚•§ D} (h : F = G) {X Y} (f : X ‚ü∂ Y) :
  F.map f = eq_to_hom (category_theory.functor.eq_obj h X) ‚â´ G.map f ‚â´ eq_to_hom (category_theory.functor.eq_obj h Y).symm :=
by subst h; simp

@[simp] lemma category_theory.nat_trans.eq_to_hom_app {F G : C ‚•§ D} (h : F = G) (X : C) :
  (eq_to_hom h : F ‚üπ G).app X = eq_to_hom (category_theory.functor.eq_obj h X) :=
by subst h; refl

-- We actually don't need this?
universes u'' v'' u''' v'''
lemma category_theory.functor.assoc_eq {E : Type u''} [category.{u'' v''} E]
  {F : Type u'''} [category.{u''' v'''} F]
  (G : C ‚•§ D) (H : D ‚•§ E) (I : E ‚•§ F) : (G ‚ãô H) ‚ãô I = G ‚ãô H ‚ãô I :=
rfl

end

namespace category_theory.transfinite

universes u v

section
variables {Œ≥ : Type v} [partial_order Œ≥]

def below_top (j : Œ≥) : Type v := {i // i ‚â§ j}

instance below_top.order_top (j : Œ≥) : lattice.order_top (below_top j) :=
{ top := ‚ü®j, le_refl j‚ü©,
  le_top := Œª i, i.property,
  .. (show partial_order (below_top j), by dunfold below_top; apply_instance) }

instance [is_well_order Œ≥ (<)] (j : Œ≥) : is_well_order (below_top j) (<) :=
show is_well_order _ (subrel (<) {i | i ‚â§ j}), by apply_instance

def below_initial_seg {j j' : Œ≥} (h : j ‚â§ j') : initial_seg ((<) : below_top j ‚Üí below_top j ‚Üí Prop) ((<) : below_top j' ‚Üí below_top j' ‚Üí Prop) :=
{ to_fun := Œª i, ‚ü®i.val, le_trans i.property h‚ü©,
  ord := by intros; refl,
  inj := by tidy,
  init := Œª ‚ü®i, hi‚ü© ‚ü®i', hi'‚ü© hii', ‚ü®‚ü®i', le_trans (le_of_lt hii') hi‚ü©, rfl‚ü© }

def open_to_closed (j : Œ≥) : initial_seg ((<) : {i // i < j} ‚Üí {i // i < j} ‚Üí Prop) ((<) : below_top j ‚Üí below_top j ‚Üí Prop) :=
{ to_fun := Œª i, ‚ü®i.val, le_of_lt i.property‚ü©,
  ord := by tidy,
  inj := by tidy,
  init := Œª ‚ü®i, hi‚ü© ‚ü®i', hi'‚ü© hii', ‚ü®‚ü®i', lt_trans hii' hi‚ü©, rfl‚ü© }

/-
def embed {j j' : Œ≥} (h : j ‚â§ j') : below_top j ‚•§ below_top j' :=
{ obj := Œª i, ‚ü®i.val, le_trans i.property h‚ü©,
  map := Œª _ _ f, f } -/


end

section
variables {Œ≤ Œ≥ : Type v} [partial_order Œ≤] [partial_order Œ≥]
def iseg (Œ≤ Œ≥) [partial_order Œ≤] [partial_order Œ≥] := initial_seg ((<) : Œ≤ ‚Üí Œ≤ ‚Üí Prop) ((<) : Œ≥ ‚Üí Œ≥ ‚Üí Prop)

variables (f : iseg Œ≤ Œ≥)

def inclusion_functor : Œ≤ ‚•§ Œ≥ :=
{ obj := f.to_fun,
  map := Œª b‚ÇÅ b‚ÇÇ h, ‚ü®‚ü®sorry‚ü©‚ü© }
end

section

variables {Œ≥ : Type v} [lattice.order_top Œ≥]

def to_below_top : Œ≥ ‚•§ below_top (‚ä§ : Œ≥) :=
{ obj := Œª j, ‚ü®j, lattice.le_top‚ü©,
  map := Œª _ _ f, f }

variables [is_well_order Œ≥ (<)]

lemma is_bot_iff (j : Œ≥) (i : below_top j) : (i = bot) ‚Üî (i.1 = bot) :=
sorry

lemma is_succ_iff (j : Œ≥) (i i' : below_top j) : is_succ i i' ‚Üî is_succ i.1 i'.1 :=
sorry

lemma is_limit_iff (j : Œ≥) (i : below_top j) : is_limit i ‚Üî is_limit i.1 :=
sorry

def embed {j j' : Œ≥} (h : j ‚â§ j') : below_top j ‚•§ below_top j' :=
inclusion_functor (below_initial_seg h)

@[simp] lemma embed_obj_val {j j' : Œ≥} (h : j ‚â§ j') (p : below_top j) :
  ((embed h).obj p).val = p.val :=
rfl

end

section restrict
local infix ` ‚âºi `:50 := initial_seg

open category_theory

variables {C : Type u} [ùíû : category.{u v} C]
include ùíû

variables
  {Œ≤ : Type v} [lattice.order_top Œ≤] [is_well_order Œ≤ (<)]
  {Œ≥ : Type v} [lattice.order_top Œ≥] [is_well_order Œ≥ (<)]
  (f : initial_seg ((<) : Œ≤ ‚Üí Œ≤ ‚Üí Prop) ((<) : Œ≥ ‚Üí Œ≥ ‚Üí Prop))

variables (F : Œ≥ ‚•§ C)

-- TODO: Somehow this got a bit too complicated, we have inclusion_functor and also embed?
-- I guess it's okay, just put the related definitions together

def restriction : Œ≤ ‚•§ C := inclusion_functor f ‚ãô F

lemma smooth_at_iff_restriction_smooth_at (i : Œ≤) :
  smooth_at F (f i) ‚Üî smooth_at (restriction f F) i :=
sorry

end restrict


end category_theory.transfinite
